import { asText } from "@prismicio/helpers";
import { PrismicRichText } from "@prismicio/react";
import type {
  GetServerSideProps,
  InferGetServerSidePropsType,
  NextPage,
} from "next";
import Head from "next/head";
import Link from "next/link";
import { fetchFromPrismic } from "../api/prismic";
import { RichText } from "../types/types";

type Homepage = {
  title?: RichText;
  content?: RichText;
  pages?: Array<{
    page?: {
      title?: RichText;
      _meta: {
        uid: string;
      };
    };
  }>;
};

type PrismicResponse = {
  allHomepages?: {
    edges?: Array<{
      node?: Homepage;
    }>;
  };
};

type Props = {
  page: Homepage;
};
const Home: NextPage<
  InferGetServerSidePropsType<GetServerSideProps<Props>>
> = ({ page }) => {
  const title = asText(page.title);
  return (
    <div>
      <Head>
        <title>{title || "Heimasíða"}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>{title || "Heimasíða!"}</h1>
      <PrismicRichText field={page.content} />
      <section>
        <h2>Síður</h2>
        <ul>
          {page.pages?.map((value) => {
            const { page } = value;
            return (
              <li>
                <Link href={`${page?._meta.uid || ""}`}>
                  <a>{asText(page?.title) || "Hlekkur á síðu"}</a>
                </Link>
              </li>
            );
          })}
        </ul>
      </section>
    </div>
  );
};

export default Home;

const query = `
query{
  allHomepages {
    edges {
      node {
        title
        content
        pages{
          page{
          	...on Page{
              title
              _meta {
                uid
              }
            }
          }
        }
      }
    }
  }
}
`;

export const getServerSideProps: GetServerSideProps<Props> = async () => {
  const result = await fetchFromPrismic<PrismicResponse>(query);
  if (
    !result ||
    !result.allHomepages?.edges ||
    !result.allHomepages.edges[0].node
  ) {
    return {
      notFound: true,
    };
  }
  const page: Homepage = result.allHomepages.edges[0].node;
  return {
    props: {
      page,
    },
  };
};
