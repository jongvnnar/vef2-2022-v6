import { asText } from "@prismicio/helpers";
import { PrismicRichText } from "@prismicio/react";
import type {
  GetServerSideProps,
  InferGetServerSidePropsType,
  NextPage,
} from "next";
import Head from "next/head";
import Link from "next/link";
import { fetchFromPrismic } from "../api/prismic";
import { Homepage, RichText } from "../types/types";

type PageLink = {
  node: {
    title: RichText;
    _meta: {
      uid: string;
    };
  };
};
type Props = {
  page: Homepage;
  links: Array<PageLink>;
};
const Home: NextPage<
  InferGetServerSidePropsType<GetServerSideProps<Props>>
> = ({ page, links }) => {
  const title = asText(page.title);
  return (
    <>
      <Head>
        <title>{title || "Heimasíða"}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>{title || "Heimasíða!"}</h1>
        <PrismicRichText field={page.content} />
        <section>
          <h2>Síður</h2>
          <ul>
            {links.map((value) => {
              const { node } = value;
              return (
                <li>
                  <Link href={`${node?._meta.uid || ""}`}>
                    <a>{asText(node?.title) || "Hlekkur á síðu"}</a>
                  </Link>
                </li>
              );
            })}
          </ul>
        </section>
      </main>
    </>
  );
};

export default Home;

const query = `
query{
  allHomepages {
    edges {
      node {
        title
        content
      }
    }
  }
  allPages(sortBy: meta_firstPublicationDate_ASC) {
    edges {
      node {
        title
        _meta{
          uid
        }
      }
    }
  }
}
`;

type PrismicResponse = {
  allHomepages?: {
    edges?: Array<{
      node?: Homepage;
    }>;
  };
  allPages?: {
    edges?: Array<PageLink>;
  };
};

export const getServerSideProps: GetServerSideProps<Props> = async () => {
  const result = await fetchFromPrismic<PrismicResponse>(query);
  if (
    !result ||
    !result.allHomepages?.edges ||
    !result.allHomepages.edges[0].node
  ) {
    return {
      notFound: true,
    };
  }
  const page = result.allHomepages.edges[0].node;
  const links = result?.allPages?.edges ?? [];
  return {
    props: {
      page,
      links,
    },
  };
};
